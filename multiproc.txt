#----------------------------------------------------------------------------------------------------------------------
# wide_sweep: I like comments before my functions because I'm used to C++ and not to Python!~ Herp dedurp dedee.~
#----------------------------------------------------------------------------------------------------------------------
def wide_sweep(log, filesize, times, num_procs):
  # binary search, with friends!

  # for the global counters...
  global stats
  arr = Array('i', [stats['seeks'], stats['reads']])

  results         = Queue()
  nearest_guesses = [LogLocation(0,        datetime(1999, 1, 1, 00, 00, 00),  LogLocation.TOO_LOW,  LogLocation.TOO_LOW),  # //! make y1k safe
                     LogLocation(filesize, datetime.now().replace(year=3000), LogLocation.TOO_HIGH, LogLocation.TOO_HIGH)] # //! make y3k safe
  prev_focus, seek_guesses = binary_search_guess(nearest_guesses[0]._seek_loc, 
                                                 nearest_guesses[1]._seek_loc, 
                                                 num_procs)
  hits  = []
  found = False
  # //! binary search until focal point of search is same
  while not found:
    stats['wide_sweep_loops'] += 1
    children = []
    for seek_loc in seek_guesses:
      p = Process(target=pessismistic_binary_search, args=(log, seek_loc, times, results, arr))
      p.start()
      children.append(p)
    for child in children:
      child.join() # wait for all procs to finish before calculating next step
    focus = -1
    while not results.empty():
      result = results.get()
      # //! need to check guess error state
      if LogLocation.MATCH in result.get_minmax():
        print "found it!" # //!
        hits.append(result)
        found = True
#      print result
      update_guess(result, nearest_guesses) # updates nearest_guesses in place
#      print nearest_guesses
#    print seek_guesses
    focus, seek_guesses = binary_search_guess(nearest_guesses[0]._seek_loc, 
                                              nearest_guesses[1]._seek_loc, 
                                              num_procs)
#    print seek_guesses

    if focus == prev_focus:
      print "steady state!" # //!
      found = True
      break
    elif (nearest_guesses[1]._seek_loc - nearest_guesses[0]._seek_loc) < WIDE_SWEEP_CLOSE_ENOUGH:
      print "close enough!" # //!
      found = True
      break
    prev_focus = focus
  
  print hits
  print nearest_guesses
  print (nearest_guesses[1]._seek_loc - nearest_guesses[0]._seek_loc, nearest_guesses[0]._seek_loc, nearest_guesses[1]._seek_loc)
  stats['seeks'] = arr[0]
  stats['reads'] = arr[1]

  return hits, nearest_guesses
